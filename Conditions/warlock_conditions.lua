-- MoP Classic Warlock Support: Add specific Burning Embers and Demonic Fury conditions
local addon_name, addon = ...

local AceGUI = LibStub("AceGUI-3.0")
local L = LibStub("AceLocale-3.0"):GetLocale(addon_name)
local color = color
local helpers = addon.help_funcs

-- Only add Warlock conditions for MoP Classic and later
if (LE_EXPANSION_LEVEL_CURRENT >= 4) then
    addon:RegisterCondition("SOUL_SHARDS", {
        description = L["Soul Shards"],
        icon = "Interface\\Icons\\inv_misc_gem_amethyst_02",
        fields = { unit = "string", operator = "string", value = "number" },
        valid = function(_, value)
            return (value.operator ~= nil and addon.isin(addon.operators, value.operator) and
                    value.unit ~= nil and addon.isin(addon.units, value.unit) and
                    value.value ~= nil)
        end,
        evaluate = function(value, cache)
            if not addon.getCached(cache, UnitExists, value.unit) then return false end
            local cur = addon.getCached(cache, UnitPower, value.unit, 7) -- Soul Shards = Power Type 7
            return addon.compare(value.operator, cur, value.value)
        end,
        print = function(_, value)
            return addon.compareString(value.operator, string.format(L["%s soul shards"], addon.nullable(addon.unitsPossessive[value.unit], L["<unit>"])), addon.nullable(value.value))
        end,
        widget = function(parent, spec, value)
            local top = parent:GetUserData("top")
            local root = top:GetUserData("root")
            local funcs = top:GetUserData("funcs")

            local unit = addon:Widget_UnitWidget(value, addon.units,
                function() top:SetStatusText(funcs:print(root, spec)) end)
            parent:AddChild(unit)

            local operator_group = addon:Widget_OperatorWidget(value, L["Soul Shards"],
                function() top:SetStatusText(funcs:print(root, spec)) end)
            parent:AddChild(operator_group)
        end,
        help = function(frame)
            addon.layout_condition_unitwidget_help(frame)
            frame:AddChild(helpers.Gap())
            addon.layout_condition_operatorwidget_help(frame, L["Soul Shards"], L["Soul Shards"],
                "The raw soul shards value of " .. color.BLIZ_YELLOW .. L["Unit"] .. color.RESET .. ". " ..
                "Soul Shards are the Affliction Warlock's unique resource in MoP Classic, typically ranging from 0 to 4. " ..
                "They are generated by certain spells like Drain Soul and consumed by powerful spells like Haunt and Soulburn.")
        end
    })

    addon:RegisterCondition("BURNING_EMBERS", {
        description = L["Burning Embers"],
        icon = "Interface\\Icons\\inv_ammo_firetar",
        fields = { unit = "string", operator = "string", value = "number" },
        valid = function(_, value)
            return (value.operator ~= nil and addon.isin(addon.operators, value.operator) and
                    value.unit ~= nil and addon.isin(addon.units, value.unit) and
                    value.value ~= nil)
        end,
        evaluate = function(value, cache)
            if not addon.getCached(cache, UnitExists, value.unit) then return false end
            local cur = addon.getCached(cache, UnitPower, value.unit, 14) -- Burning Embers = Power Type 14
            return addon.compare(value.operator, cur, value.value)
        end,
        print = function(_, value)
            return addon.compareString(value.operator, string.format(L["%s burning embers"], addon.nullable(addon.unitsPossessive[value.unit], L["<unit>"])), addon.nullable(value.value))
        end,
        widget = function(parent, spec, value)
            local top = parent:GetUserData("top")
            local root = top:GetUserData("root")
            local funcs = top:GetUserData("funcs")

            local unit = addon:Widget_UnitWidget(value, addon.units,
                function() top:SetStatusText(funcs:print(root, spec)) end)
            parent:AddChild(unit)

            local operator_group = addon:Widget_OperatorWidget(value, L["Burning Embers"],
                function() top:SetStatusText(funcs:print(root, spec)) end)
            parent:AddChild(operator_group)
        end,
        help = function(frame)
            addon.layout_condition_unitwidget_help(frame)
            frame:AddChild(helpers.Gap())
            addon.layout_condition_operatorwidget_help(frame, L["Burning Embers"], L["Burning Embers"],
                "The raw burning embers value of " .. color.BLIZ_YELLOW .. L["Unit"] .. color.RESET .. ". " ..
                "Burning Embers are the Destruction Warlock's unique resource in MoP Classic, typically ranging from 0 to 4. " ..
                "They are generated by certain spells like Conflagrate and consumed by powerful spells like Chaos Bolt.")
        end
    })

    addon:RegisterCondition("DEMONIC_FURY", {
        description = L["Demonic Fury"],
        icon = "Interface\\Icons\\spell_fire_fireball",
        fields = { unit = "string", operator = "string", value = "number" },
        valid = function(_, value)
            return (value.operator ~= nil and addon.isin(addon.operators, value.operator) and
                    value.unit ~= nil and addon.isin(addon.units, value.unit) and
                    value.value ~= nil)
        end,
        evaluate = function(value, cache)
            if not addon.getCached(cache, UnitExists, value.unit) then return false end
            local cur = addon.getCached(cache, UnitPower, value.unit, 15) -- Demonic Fury = Power Type 15
            return addon.compare(value.operator, cur, value.value)
        end,
        print = function(_, value)
            return addon.compareString(value.operator, string.format(L["%s demonic fury"], addon.nullable(addon.unitsPossessive[value.unit], L["<unit>"])), addon.nullable(value.value))
        end,
        widget = function(parent, spec, value)
            local top = parent:GetUserData("top")
            local root = top:GetUserData("root")
            local funcs = top:GetUserData("funcs")

            local unit = addon:Widget_UnitWidget(value, addon.units,
                function() top:SetStatusText(funcs:print(root, spec)) end)
            parent:AddChild(unit)

            local operator_group = addon:Widget_OperatorWidget(value, L["Demonic Fury"],
                function() top:SetStatusText(funcs:print(root, spec)) end)
            parent:AddChild(operator_group)
        end,
        help = function(frame)
            addon.layout_condition_unitwidget_help(frame)
            frame:AddChild(helpers.Gap())
            addon.layout_condition_operatorwidget_help(frame, L["Demonic Fury"], L["Demonic Fury"],
                "The raw demonic fury value of " .. color.BLIZ_YELLOW .. L["Unit"] .. color.RESET .. ". " ..
                "Demonic Fury is the Demonology Warlock's unique resource in MoP Classic, typically ranging from 0 to 1000. " ..
                "It is generated by certain spells and consumed by Metamorphosis abilities.")
        end
    })
end
